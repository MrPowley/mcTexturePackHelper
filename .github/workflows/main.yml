            - name: Build executables or extension modules from Python projects
  # You may pin to the exact commit or the version.
  # uses: Nuitka/Nuitka-Action@b24f9b7859f1022afcfad039eb8b8ac3ae299e39
  uses: Nuitka/Nuitka-Action@v1.3
  with:
    # Directory to run nuitka in if not top level
    working-directory: # optional, default is .
    # Version of nuitka to use, branches, tags work
    nuitka-version: # optional, default is main
    # Path to python script that is to be built.
    script-name: 
    # Github personal access token of an account authorized to access the Nuitka-commercial repo
    access-token: # optional
    # Mode in which to compile. Accelerated runs in your Python
installation and depends on it. Standalone creates a folder
with an executable contained to run it. Onefile creates a
single executable to deploy. App is onefile except on macOS
where it's not to be used. Module makes a module, and
package includes also all sub-modules and sub-packages. Dll
is currently under development and not for users yet.
Default is 'accelerated'.

    mode: # optional, default is app
    # Python flags to use. Default is what you are using to run Nuitka, this
enforces a specific mode. These are options that also exist to standard
Python executable. Currently supported: "-S" (alias "no_site"),
"static_hashes" (do not use hash randomization), "no_warnings" (do not
give Python run time warnings), "-O" (alias "no_asserts"), "no_docstrings"
(do not use doc strings), "-u" (alias "unbuffered"), "isolated" (do not
load outside code), "-P" (alias "safe_path", do not used current directory
in module search) and "-m" (package mode, compile as "package.__main__").
Default empty.

    python-flag: # optional
    # Use debug version or not. Default uses what you are using to run Nuitka, most
likely a non-debug version. Only for debugging and testing purposes.

    python-debug: # optional
    # Enabled plugins. Must be plug-in names. Use '--plugin-list' to query the
full list and exit. Default empty.

    enable-plugins: # optional
    # The file name of user plugin. Can be given multiple times. Default empty.

    user-plugin: # optional
    # Plugins can detect if they might be used, and the you can disable the warning
via "--disable-plugin=plugin-that-warned", or you can use this option to disable
the mechanism entirely, which also speeds up compilation slightly of course as
this detection code is run in vain once you are certain of which plugins to
use. Defaults to off.

    plugin-no-detection: # optional
    # Provide a module parameter. You are asked by some packages
to provide extra decisions. Format is currently
--module-parameter=module.name-option-name=value
Default empty.

    module-parameter: # optional
    # Report module, data files, compilation, plugin, etc. details in an XML output file. This
is also super useful for issue reporting. These reports can e.g. be used to re-create
the environment easily using it with '--create-environment-from-report', but contain a
lot of information. Default is off.

    report: # optional
    # Report data in diffable form, i.e. no timing or memory usage values that vary from run
to run. Default is off.

    report-diffable: # optional
    # Report data from you. This can be given multiple times and be
anything in 'key=value' form, where key should be an identifier, e.g. use
'--report-user-provided=pipenv-lock-hash=64a5e4' to track some input values.
Default is empty.

    report-user-provided: # optional
    # Report via template. Provide template and output filename 'template.rst.j2:output.rst'. For
built-in templates, check the User Manual for what these are. Can be given multiple times.
Default is empty.

    report-template: # optional
    # Disable all information outputs, but show warnings.
Defaults to off.

    quiet: # optional
    # Run the C building backend Scons with verbose information, showing the executed commands,
detected compilers. Defaults to off.

    show-scons: # optional
    # Provide memory information and statistics.
Defaults to off.

    show-memory: # optional
    # Include data files for the given package name. DLLs and extension modules
are not data files and never included like this. Can use patterns the
filenames as indicated below. Data files of packages are not included
by default, but package configuration can do it.
This will only include non-DLL, non-extension modules, i.e. actual data
files. After a ":" optionally a filename pattern can be given as
well, selecting only matching files. Examples:
"--include-package-data=package_name" (all files)
"--include-package-data=package_name:*.txt" (only certain type)
"--include-package-data=package_name:some_filename.dat (concrete file)
Default empty.

    include-package-data: # optional
    # Include data files by filenames in the distribution. There are many
allowed forms. With '--include-data-files=/path/to/file/*.txt=folder_name/some.txt' it
will copy a single file and complain if it's multiple. With
'--include-data-files=/path/to/files/*.txt=folder_name/' it will put
all matching files into that folder. For recursive copy there is a
form with 3 values that '--include-data-files=/path/to/scan=folder_name/=**/*.txt'
that will preserve directory structure. Default empty.

    include-data-files: # optional
    # Include data files from complete directory in the distribution. This is
recursive. Check '--include-data-files' with patterns if you want non-recursive
inclusion. An example would be '--include-data-dir=/path/some_dir=data/some_dir'
for plain copy, of the whole directory. All non-code files are copied, if you
want to use '--noinclude-data-files' option to remove them. Default empty.

    include-data-dir: # optional
    # Do not include data files matching the filename pattern given. This is against
the target filename, not source paths. So to ignore a file pattern from package
data for 'package_name' should be matched as 'package_name/*.txt'. Or for the
whole directory simply use 'package_name'. Default empty.

    noinclude-data-files: # optional
    # Include the specified data file patterns outside of the onefile binary,
rather than on the inside. Makes only sense in case of '--onefile'
compilation. First files have to be specified as included with other
`--include-*data*` options, and then this refers to target paths
inside the distribution. Default empty.

    include-onefile-external-data: # optional
    # Include raw directories completely in the distribution. This is
recursive. Check '--include-data-dir' to use the sane option.
Default empty.

    include-raw-dir: # optional
    # Include a whole package. Give as a Python namespace, e.g. "some_package.sub_package" and Nuitka will then find it and include it and all the modules found below that disk location in the binary or extension module it creates, and make it available for import by the code. To avoid unwanted sub packages, e.g. tests you can e.g. do this "--nofollow-import-to=*.tests". Default empty.
    include-package: # optional
    # Include a single module. Give as a Python namespace, e.g. "some_package.some_module" and Nuitka will then find it and include it in the binary or extension module it creates, and make it available for import by the code. Default empty.
    include-module: # optional
    # Include the content of that directory, no matter if it is used by the given main program in a visible form. Overrides all other inclusion options. Can be given multiple times. Default empty.
    include-plugin-directory: # optional
    # Include into files matching the PATTERN. Overrides all other follow options. Can be given multiple times. Default empty.
    include-plugin-files: # optional
    # For already compiled extension modules, where there is both a source file and an extension module, normally the extension module is used, but it should be better to compile the module from available source code for best performance. If not desired, there is --no- prefer-source-code to disable warnings about it. Default off.
    prefer-source-code: # optional
    # Do not follow to that module name even if used, or if a package name, to the whole package in any case, overrides all other options. Can be given multiple times. Default empty.
    nofollow-import-to: # optional
    # User provided YAML file with package configuration. You can include DLLs, remove bloat, add hidden dependencies. Check User Manual for a complete description of the format to use. Can be given multiple times. Defaults to empty.
    user-package-configuration-file: # optional
    # Use this as a folder to unpack onefile. Defaults to '%TEMP%\onefile_%PID%_%TIME%', but e.g. '%CACHE_DIR%/%COMPANY%/%PRODUCT%/%VERSION%' would be cached and good too.
    onefile-tempdir-spec: # optional
    # When stopping the child, e.g. due to CTRL-C or shutdown, how much time to allow before killing it the hard way. Unit is ms. Default 5000.
    onefile-child-grace-time: # optional
    # When creating the onefile, disable compression of the payload. Default is false.
    onefile-no-compression: # optional
    # Enable warnings for implicit exceptions detected at compile time.

    warn-implicit-exceptions: # optional
    # Enable warnings for unusual code detected at compile time.

    warn-unusual-code: # optional
    # Allow Nuitka to download external code if necessary, e.g. dependency
walker, ccache, and even gcc on Windows. To disable, redirect input
from nul device, e.g. "</dev/null" or "<NUL:". Default is to prompt.

    assume-yes-for-downloads: # optional, default is true
    # Disable warning for a given mnemonic. These are given to make sure you are aware of
certain topics, and typically point to the Nuitka website. The mnemonic is the part
of the URL at the end, without the HTML suffix. Can be given multiple times and
accepts shell pattern. Default empty.

    nowarn-mnemonic: # optional
    # Disable code aimed at making finding compatibility issues easier. This
will e.g. prevent execution with "-c" argument, which is often used by
code that attempts run a module, and causes a program to start itself
over and over potentially. Disable once you deploy to end users, for
finding typical issues, this is very helpful during development. Default
off.

    deployment: # optional
    # Keep deployment mode, but disable selectively parts of it. Errors from
deployment mode will output these identifiers. Default empty.

    no-deployment-flag: # optional
    # Directory for output builds
    output-dir: # optional, default is build
    # Specify how the executable should be named. For extension modules there is no choice, also not for standalone mode and using it will be an error. This may include path information that needs to exist though. Defaults to '<program_name>' on this platform. .exe)
    output-file: # optional
    # Obsolete as of Nuitka 2.3: When compiling for Windows or macOS, disable the console window and create a GUI application. Defaults to false.
    disable-console: # optional
    # Obsolete as of Nuitka 2.3: When compiling for Windows or macOS, enable the console window and create a GUI application. Defaults to false and tells Nuitka your choice is intentional.
    enable-console: # optional
    # Name of the company to use in version information. Defaults to unused.

    company-name: # optional
    # Name of the product to use in version information. Defaults to base filename of the binary.

    product-name: # optional
    # File version to use in version information. Must be a sequence of up to 4
numbers, e.g. 1.0 or 1.0.0.0, no more digits are allowed, no strings are
allowed. Defaults to unused.

    file-version: # optional
    # Product version to use in version information. Same rules as for file version.
Defaults to unused.

    product-version: # optional
    # Description of the file used in version information. Windows only at this time. Defaults to binary filename.

    file-description: # optional
    # Copyright used in version information. Windows/macOS only at this time. Defaults to not present.

    copyright: # optional
    # Trademark used in version information. Windows/macOS only at this time. Defaults to not present.

    trademarks: # optional
    # Force standard output of the program to go to this location. Useful for programs with
disabled console and programs using the Windows Services Plugin of Nuitka commercial.
Defaults to not active, use e.g. '{PROGRAM_BASE}.out.txt', i.e. file near your program,
check User Manual for full list of available values.

    force-stdout-spec: # optional
    # Force standard error of the program to go to this location. Useful for programs with
disabled console and programs using the Windows Services Plugin of Nuitka commercial.
Defaults to not active, use e.g. '{PROGRAM_BASE}.err.txt', i.e. file near your program,
check User Manual for full list of available values.

    force-stderr-spec: # optional
    # Select console mode to use. Default mode is 'force' and creates a
console window unless the program was started from one. With 'disable'
it doesn't create or use a console at all. With 'attach' an existing
console will be used for outputs. With 'hide' a newly spawned console
will be hidden and an already existing console will behave like
'force'. Default is 'force'.

    windows-console-mode: # optional
    # Add executable icon. Can be given multiple times for different resolutions
or files with multiple icons inside. In the later case, you may also suffix
with #<n> where n is an integer index starting from 1, specifying a specific
icon to be included, and all others to be ignored.

    windows-icon-from-ico: # optional
    # Copy executable icons from this existing executable (Windows only).

    windows-icon-from-exe: # optional
    # When compiling for Windows and onefile, show this while loading the application. Defaults to off.

    onefile-windows-splash-screen-image: # optional
    # Request Windows User Control, to grant admin rights on execution. (Windows only). Defaults to off.

    windows-uac-admin: # optional
    # Request Windows User Control, to enforce running from a few folders only, remote
desktop access. (Windows only). Defaults to off.

    windows-uac-uiaccess: # optional
    # What architectures is this to supposed to run on. Default and limit
is what the running Python allows for. Default is "native" which is
the architecture the Python is run with.

    macos-target-arch: # optional
    # Add icon for the application bundle to use. Can be given only one time. Defaults to Python icon if available.

    macos-app-icon: # optional
    # Name of the application to use for macOS signing. Follow "com.YourCompany.AppName"
naming results for best results, as these have to be globally unique, and will
potentially grant protected API accesses.

    macos-signed-app-name: # optional
    # Name of the product to use in macOS bundle information. Defaults to base
filename of the binary.

    macos-app-name: # optional
    # Mode of application for the application bundle. When launching a Window, and appearing
in Docker is desired, default value "gui" is a good fit. Without a Window ever, the
application is a "background" application. For UI elements that get to display later,
"ui-element" is in-between. The application will not appear in dock, but get full
access to desktop when it does open a Window later.

    macos-app-mode: # optional
    # When signing on macOS, by default an ad-hoc identify will be used, but with this
option your get to specify another identity to use. The signing of code is now
mandatory on macOS and cannot be disabled. Use "auto" to detect your only identity
installed. Default "ad-hoc" if not given.

    macos-sign-identity: # optional
    # When signing for notarization, using a proper TeamID identity from Apple, use
the required runtime signing option, such that it can be accepted.

    macos-sign-notarization: # optional
    # Product version to use in macOS bundle information. Defaults to "1.0" if
not given.

    macos-app-version: # optional
    # Request an entitlement for access to a macOS protected resources, e.g.
"NSMicrophoneUsageDescription:Microphone access for recording audio."
requests access to the microphone and provides an informative text for
the user, why that is needed. Before the colon, is an OS identifier for
an access right, then the informative text. Legal values can be found on
https://developer.apple.com/documentation/bundleresources/information_property_list/protected_resources and
the option can be specified multiple times. Default empty.

    macos-app-protected-resource: # optional
    # Add executable icon for onefile binary to use. Can be given only one time. Defaults to Python icon if available.

    linux-icon: # optional
    # Enforce the use of clang. On Windows this requires a working Visual
Studio version to piggy back on. Defaults to off.

    clang: # optional
    # Enforce the use of MinGW64 on Windows. Defaults to off unless MSYS2 with MinGW Python is used.

    mingw64: # optional
    # Enforce the use of specific MSVC version on Windows. Allowed values
are e.g. "14.3" (MSVC 2022) and other MSVC version numbers, specify
"list" for a list of installed compilers, or use "latest".

Defaults to latest MSVC being used if installed, otherwise MinGW64
is used.

    msvc: # optional
    # Specify the allowed number of parallel C compiler jobs. Negative values
are system CPU minus the given value. Defaults to the full system CPU
count unless low memory mode is activated, then it defaults to 1.

    jobs: # optional
    # Use link time optimizations (MSVC, gcc, clang). Allowed values are
"yes", "no", and "auto" (when it's known to work). Defaults to
"auto".

    lto: # optional
    # Use static link library of Python. Allowed values are "yes", "no",
and "auto" (when it's known to work). Defaults to "auto".

    static-libpython: # optional
    # This option is gcc specific. For the gcc compiler, select the
"cf-protection" mode. Default "auto" is to use the gcc default
value, but you can override it, e.g. to disable it with "none"
value. Refer to gcc documentation for "-fcf-protection" for the
details.

    cf-protection: # optional
    # Executing all self checks possible to find errors in Nuitka, do not use for
production. Defaults to off.

    debug: # optional
    # Disable check normally done with "--debug". With Python3.12+ do not check known
immortal object assumptions. Some C libraries corrupt them. Defaults to check
being made if "--debug" is on.

    no-debug-immortal-assumptions: # optional
    # Disable check normally done with "--debug". The C compilation may produce
warnings, which it often does for some packages without these being issues,
esp. for unused values.

    no-debug-c-warnings: # optional
    # Keep debug info in the resulting object file for better debugger interaction.
Defaults to off.

    unstripped: # optional
    # Traced execution output, output the line of code before executing it.
Defaults to off.

    trace-execution: # optional
    # Write the internal program structure, result of optimization in XML form to given filename.

    xml: # optional
    # Use features declared as 'experimental'. May have no effect if no experimental
features are present in the code. Uses secret tags (check source) per
experimented feature.

    experimental: # optional
    # Attempt to use less memory, by forking less C compilation jobs and using
options that use less memory. For use on embedded machines. Use this in
case of out of memory problems. Defaults to off.

    low-memory: # optional
    # What to do if a 'setuptools' or import is encountered. This package can be big with
dependencies, and should definitely be avoided. Also handles 'setuptools_scm'.

    noinclude-setuptools-mode: # optional
    # What to do if a 'pytest' import is encountered. This package can be big with
dependencies, and should definitely be avoided. Also handles 'nose' imports.

    noinclude-pytest-mode: # optional
    # What to do if a unittest import is encountered. This package can be big with
dependencies, and should definitely be avoided.

    noinclude-unittest-mode: # optional
    # What to do if a pydoc import is encountered. This package use is mark of useless
code for deployments and should be avoided.

    noinclude-pydoc-mode: # optional
    # What to do if a IPython import is encountered. This package can be big with
dependencies, and should definitely be avoided.

    noinclude-IPython-mode: # optional
    # What to do if a 'dask' import is encountered. This package can be big with
dependencies, and should definitely be avoided.

    noinclude-dask-mode: # optional
    # What to do if a 'numba' import is encountered. This package can be big with
dependencies, and is currently not working for standalone. This package is
big with dependencies, and should definitely be avoided.

    noinclude-numba-mode: # optional
    # This actually provides the default "warning" value for above options, and
can be used to turn all of these on.

    noinclude-default-mode: # optional
    # What to do if a specific import is encountered. Format is module name,
which can and should be a top level package and then one choice, "error",
"warning", "nofollow", e.g. PyQt5:error.

    noinclude-custom-mode: # optional
    # Include support for these modules to pickle nested compiled functions. You
can use "all" which is the default, but esp. in module mode, just might
want to limit yourself to not create unnecessary run-time usages. For
standalone mode, you can leave it at the default, at it will detect
the usage.

    include-pickle-support-module: # optional
    # Should 'Pmw.Blt' not be included, Default is to include it.

    include-pmw-blt: # optional
    # Should 'Pmw.Color' not be included, Default is to include it.

    include-pmw-color: # optional
    # The Tk library dir. Nuitka is supposed to automatically detect it, but you can
override it here. Default is automatic detection.

    tk-library-dir: # optional
    # The Tcl library dir. See comments for Tk library dir.

    tcl-library-dir: # optional
    # Which Qt plugins to include. These can be big with dependencies, so
by default only the "sensible" ones are included, but you can also put
"all" or list them individually. If you specify something that does
not exist, a list of all available will be given.

    include-qt-plugins: # optional
    # Which Qt plugins to not include. This removes things, so you can
ask to include "all" and selectively remove from there, or even
from the default sensible list.

    noinclude-qt-plugins: # optional
    # Include Qt translations with QtWebEngine if used. These can be a lot
of files that you may not want to be included.

    noinclude-qt-translations: # optional
    # The UPX binary to use or the directory it lives in, by default `upx` from PATH is used.

    upx-binary: # optional
    # Do not cache UPX compression result, by default DLLs are cached, exe files are not.

    upx-disable-cache: # optional
    # Enables debug outputs for the debugger plugin, so that it e.g. says
why it rejects something.

    anti-debugger-debugging: # optional
    # URL to check for automatic updates. Default empty, i.e. not updates.

    auto-update-url-spec: # optional
    # Debug automatic updates at runtime printing messages. Default False.

    auto-update-debug: # optional
    # Salt value to make encryption result unique.

    data-hiding-salt-value: # optional
    # Pattern of data files to embed for use during compile time. These should
match target filenames.

    embed-data-files-compile-time-pattern: # optional
    # Pattern of data files to embed for use during run time. These should
match target filenames.

    embed-data-files-run-time-pattern: # optional
    # Pattern of data files to embed for use with Qt at run time. These should
match target filenames.

    embed-data-files-qt-resource-pattern: # optional
    # For debugging purposes, print out information for Qt resources not found.

    embed-debug-qt-resources: # optional
    # The 'signtool' executable. You may make this a wrapper script should you want very
specific options, by default `signtool` from PATH or used MSVC used is used.

    windows-signing-tool: # optional
    # Name of the certificate to use. This will be used to sign the binary.

    windows-certificate-name: # optional
    # Checksum of the certificate to use. This will be used to sign the binary.

    windows-certificate-sha1: # optional
    # Filename of the certificate, typically a ".pfx" file. This will be used to sign
the binary.

    windows-certificate-filename: # optional
    # Password of the certificate filename used. Defaults to empty, must be
provided to successfully sign if certificate file has one.

    windows-certificate-password: # optional
    # Comment to be used for the signed comments. Optional, defaults to not given.

    windows-signed-content-comment: # optional
    # The encryption key to use.

    encryption-key: # optional
    # Apply encryption to standard output.

    encrypt-stdout: # optional
    # Apply encryption to standard error.

    encrypt-stderr: # optional
    # In case the encryption fails to install, do not abort, but run normally and trace error unencrypted.

    encrypt-debug-init: # optional
    # These are two very similar packages that can both do the encryption, and
to avoid duplication in case one of your packages requires the other,
you get to select which one to use by the plugin code. By default
"pycryptodomex" is used and only legacy code uses that. However it
will fallback to "pycryptodome" if that's the only one installed,
and you can enforce Nuitka choice if both are for some reason.

    encrypt-crypto-package: # optional
    # The Windows service name.

    windows-service-name: # optional
    # For shutdown, wait this extra time before killing. Unit is ms, and default is 2000,
i.e. it waits 2 seconds to allow cleanup. Increase if you need more time, decrease
if you want faster service shutdown.

    windows-service-grace-time: # optional
    # Pick the service start mode, value "auto" starts automatically at
reboot without login, "demand" (default) must be started manually,
and "disabled" cannot be started, requires further action to
change it.

    windows-service-start-mode: # optional
    # Should the program allow to be ran from the command line. By default
it does not and only outputs a message it is disallowed.

    windows-service-cli: # optional
    # Disables caching of compiled binaries. Defaults to false.
    disable-cache: # optional
          
